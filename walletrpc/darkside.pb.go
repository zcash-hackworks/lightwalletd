// Copyright (c) 2019-2020 The Zcash developers
// Distributed under the MIT software license, see the accompanying
// file COPYING or https://www.opensource.org/licenses/mit-license.php .

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.4
// source: darkside.proto

package walletrpc

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DarksideLightwalletdState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartHeight       int32    `protobuf:"varint,1,opt,name=startHeight,proto3" json:"startHeight,omitempty"`
	SaplingActivation int32    `protobuf:"varint,2,opt,name=saplingActivation,proto3" json:"saplingActivation,omitempty"`
	BranchID          string   `protobuf:"bytes,3,opt,name=branchID,proto3" json:"branchID,omitempty"`
	ChainName         string   `protobuf:"bytes,4,opt,name=chainName,proto3" json:"chainName,omitempty"`
	Blocks            []string `protobuf:"bytes,5,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (x *DarksideLightwalletdState) Reset() {
	*x = DarksideLightwalletdState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_darkside_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DarksideLightwalletdState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DarksideLightwalletdState) ProtoMessage() {}

func (x *DarksideLightwalletdState) ProtoReflect() protoreflect.Message {
	mi := &file_darkside_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DarksideLightwalletdState.ProtoReflect.Descriptor instead.
func (*DarksideLightwalletdState) Descriptor() ([]byte, []int) {
	return file_darkside_proto_rawDescGZIP(), []int{0}
}

func (x *DarksideLightwalletdState) GetStartHeight() int32 {
	if x != nil {
		return x.StartHeight
	}
	return 0
}

func (x *DarksideLightwalletdState) GetSaplingActivation() int32 {
	if x != nil {
		return x.SaplingActivation
	}
	return 0
}

func (x *DarksideLightwalletdState) GetBranchID() string {
	if x != nil {
		return x.BranchID
	}
	return ""
}

func (x *DarksideLightwalletdState) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *DarksideLightwalletdState) GetBlocks() []string {
	if x != nil {
		return x.Blocks
	}
	return nil
}

var File_darkside_proto protoreflect.FileDescriptor

var file_darkside_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x64, 0x61, 0x72, 0x6b, 0x73, 0x69, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x15, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x7a, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e,
	0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x1a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbd, 0x01, 0x0a, 0x19, 0x44, 0x61, 0x72, 0x6b, 0x73,
	0x69, 0x64, 0x65, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x61, 0x70, 0x6c, 0x69, 0x6e,
	0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x73, 0x61, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x32, 0xe4, 0x01, 0x0a, 0x10, 0x44, 0x61, 0x72, 0x6b, 0x73,
	0x69, 0x64, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x12, 0x6a, 0x0a, 0x1f, 0x44,
	0x61, 0x72, 0x6b, 0x73, 0x69, 0x64, 0x65, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69,
	0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c,
	0x2e, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x7a, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x25, 0x2e, 0x63,
	0x61, 0x73, 0x68, 0x2e, 0x7a, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x00, 0x30, 0x01, 0x12, 0x64, 0x0a, 0x10, 0x44, 0x61, 0x72, 0x6b, 0x73,
	0x69, 0x64, 0x65, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x30, 0x2e, 0x63, 0x61,
	0x73, 0x68, 0x2e, 0x7a, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x44, 0x61, 0x72, 0x6b, 0x73, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x67, 0x68,
	0x74, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x1c, 0x2e,
	0x63, 0x61, 0x73, 0x68, 0x2e, 0x7a, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x10, 0x5a,
	0x0b, 0x2e, 0x3b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x72, 0x70, 0x63, 0xba, 0x02, 0x00, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_darkside_proto_rawDescOnce sync.Once
	file_darkside_proto_rawDescData = file_darkside_proto_rawDesc
)

func file_darkside_proto_rawDescGZIP() []byte {
	file_darkside_proto_rawDescOnce.Do(func() {
		file_darkside_proto_rawDescData = protoimpl.X.CompressGZIP(file_darkside_proto_rawDescData)
	})
	return file_darkside_proto_rawDescData
}

var file_darkside_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_darkside_proto_goTypes = []interface{}{
	(*DarksideLightwalletdState)(nil), // 0: cash.z.wallet.sdk.rpc.DarksideLightwalletdState
	(*Empty)(nil),                     // 1: cash.z.wallet.sdk.rpc.Empty
	(*RawTransaction)(nil),            // 2: cash.z.wallet.sdk.rpc.RawTransaction
}
var file_darkside_proto_depIdxs = []int32{
	1, // 0: cash.z.wallet.sdk.rpc.DarksideStreamer.DarksideGetIncomingTransactions:input_type -> cash.z.wallet.sdk.rpc.Empty
	0, // 1: cash.z.wallet.sdk.rpc.DarksideStreamer.DarksideSetState:input_type -> cash.z.wallet.sdk.rpc.DarksideLightwalletdState
	2, // 2: cash.z.wallet.sdk.rpc.DarksideStreamer.DarksideGetIncomingTransactions:output_type -> cash.z.wallet.sdk.rpc.RawTransaction
	1, // 3: cash.z.wallet.sdk.rpc.DarksideStreamer.DarksideSetState:output_type -> cash.z.wallet.sdk.rpc.Empty
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_darkside_proto_init() }
func file_darkside_proto_init() {
	if File_darkside_proto != nil {
		return
	}
	file_service_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_darkside_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DarksideLightwalletdState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_darkside_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_darkside_proto_goTypes,
		DependencyIndexes: file_darkside_proto_depIdxs,
		MessageInfos:      file_darkside_proto_msgTypes,
	}.Build()
	File_darkside_proto = out.File
	file_darkside_proto_rawDesc = nil
	file_darkside_proto_goTypes = nil
	file_darkside_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DarksideStreamerClient is the client API for DarksideStreamer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DarksideStreamerClient interface {
	DarksideGetIncomingTransactions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (DarksideStreamer_DarksideGetIncomingTransactionsClient, error)
	DarksideSetState(ctx context.Context, in *DarksideLightwalletdState, opts ...grpc.CallOption) (*Empty, error)
}

type darksideStreamerClient struct {
	cc grpc.ClientConnInterface
}

func NewDarksideStreamerClient(cc grpc.ClientConnInterface) DarksideStreamerClient {
	return &darksideStreamerClient{cc}
}

func (c *darksideStreamerClient) DarksideGetIncomingTransactions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (DarksideStreamer_DarksideGetIncomingTransactionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DarksideStreamer_serviceDesc.Streams[0], "/cash.z.wallet.sdk.rpc.DarksideStreamer/DarksideGetIncomingTransactions", opts...)
	if err != nil {
		return nil, err
	}
	x := &darksideStreamerDarksideGetIncomingTransactionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DarksideStreamer_DarksideGetIncomingTransactionsClient interface {
	Recv() (*RawTransaction, error)
	grpc.ClientStream
}

type darksideStreamerDarksideGetIncomingTransactionsClient struct {
	grpc.ClientStream
}

func (x *darksideStreamerDarksideGetIncomingTransactionsClient) Recv() (*RawTransaction, error) {
	m := new(RawTransaction)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *darksideStreamerClient) DarksideSetState(ctx context.Context, in *DarksideLightwalletdState, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/cash.z.wallet.sdk.rpc.DarksideStreamer/DarksideSetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DarksideStreamerServer is the server API for DarksideStreamer service.
type DarksideStreamerServer interface {
	DarksideGetIncomingTransactions(*Empty, DarksideStreamer_DarksideGetIncomingTransactionsServer) error
	DarksideSetState(context.Context, *DarksideLightwalletdState) (*Empty, error)
}

// UnimplementedDarksideStreamerServer can be embedded to have forward compatible implementations.
type UnimplementedDarksideStreamerServer struct {
}

func (*UnimplementedDarksideStreamerServer) DarksideGetIncomingTransactions(*Empty, DarksideStreamer_DarksideGetIncomingTransactionsServer) error {
	return status.Errorf(codes.Unimplemented, "method DarksideGetIncomingTransactions not implemented")
}
func (*UnimplementedDarksideStreamerServer) DarksideSetState(context.Context, *DarksideLightwalletdState) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DarksideSetState not implemented")
}

func RegisterDarksideStreamerServer(s *grpc.Server, srv DarksideStreamerServer) {
	s.RegisterService(&_DarksideStreamer_serviceDesc, srv)
}

func _DarksideStreamer_DarksideGetIncomingTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DarksideStreamerServer).DarksideGetIncomingTransactions(m, &darksideStreamerDarksideGetIncomingTransactionsServer{stream})
}

type DarksideStreamer_DarksideGetIncomingTransactionsServer interface {
	Send(*RawTransaction) error
	grpc.ServerStream
}

type darksideStreamerDarksideGetIncomingTransactionsServer struct {
	grpc.ServerStream
}

func (x *darksideStreamerDarksideGetIncomingTransactionsServer) Send(m *RawTransaction) error {
	return x.ServerStream.SendMsg(m)
}

func _DarksideStreamer_DarksideSetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DarksideLightwalletdState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarksideStreamerServer).DarksideSetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cash.z.wallet.sdk.rpc.DarksideStreamer/DarksideSetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarksideStreamerServer).DarksideSetState(ctx, req.(*DarksideLightwalletdState))
	}
	return interceptor(ctx, in, info, handler)
}

var _DarksideStreamer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cash.z.wallet.sdk.rpc.DarksideStreamer",
	HandlerType: (*DarksideStreamerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DarksideSetState",
			Handler:    _DarksideStreamer_DarksideSetState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DarksideGetIncomingTransactions",
			Handler:       _DarksideStreamer_DarksideGetIncomingTransactions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "darkside.proto",
}
